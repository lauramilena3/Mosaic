import os
import re
#import pandas as pd
#======================================================
# Config files
#======================================================
configfile: "config.yaml"

#======================================================
# Global variables
#======================================================

RAW_DATA_DIR =config['input_dir']
RESULTS_DIR=config['results_dir'].rstrip("/")
LONG_ASSEMBLER=config['long_assembler']

if RESULTS_DIR == "" and not RAW_DATA_DIR == "":
	RESULTS_DIR=os.path.abspath(os.path.join(RAW_DATA_DIR, os.pardir))


REPRESENTATIVE_CONTIGS=config['representative_contigs'].rstrip("/")
VIRAL_CONTIGS=REPRESENTATIVE_CONTIGS
if VIRAL_CONTIGS == "":
	VIRAL_CONTIGS_BASE="positive_contigs"
	VIRAL_CONTIGS_DIR=RESULTS_DIR + "/04_VIRAL_ID"
	REPRESENTATIVE_CONTIGS_BASE="95-80_positive_contigs"
	REPRESENTATIVE_CONTIGS_DIR=RESULTS_DIR + "/05_vOTUs"
else:
	REPRESENTATIVE_CONTIGS_BASE=os.path.basename(os.path.abspath(VIRAL_CONTIGS)).split(".")[0]
	REPRESENTATIVE_CONTIGS_DIR=os.path.dirname(os.path.abspath(VIRAL_CONTIGS)).rstrip("/")
	VIRAL_CONTIGS_BASE=""
	VIRAL_CONTIGS_DIR=""
	if RESULTS_DIR== "":
		RESULTS_DIR=REPRESENTATIVE_CONTIGS_DIR

print(VIRAL_CONTIGS_DIR)



RULES_DIR = 'rules'

CONFIDENCE_TYPES=["high", "low"]
SAMPLING_TYPE=config['sampling'].split()
SAMPLES=""

SRA_list=config['sra_list'].split()

CONTAMINANTS=config['contaminants_list'].split()
NANOPORE=False
TOMBO=False
PAIRED=False
READ_TYPES=[config['forward_tag']]
POOLED=config['nanopore_pooled']
NANOPORE_SAMPLES=""
if not RAW_DATA_DIR == "":
	RAW_DATA_DIR=RAW_DATA_DIR.rstrip("/")
	SAMPLES,=glob_wildcards(RAW_DATA_DIR + "/{sample}_" + str(config['forward_tag']) + ".fastq")
	NANOPORE_SAMPLES,=glob_wildcards(RAW_DATA_DIR + "/{sample}_" + str(config['nanopore_tag']) + ".fastq")

	for fname in os.listdir(RAW_DATA_DIR):
		if fname.endswith(str(config['reverse_tag']) + '.fastq'):
			PAIRED=True
		elif fname.endswith(str(config['nanopore_tag']) + '.fastq'):
			NANOPORE=True
		elif fname.endswith(str(config['nanopore_tag']) + '_fast5_single'):
			TOMBO=True
else:
	RAW_DATA_DIR=RESULTS_DIR+"/00_RAW_DATA"


#NANOPORE_SAMPLES=SAMPLES

if PAIRED:
	READ_TYPES.append(config['reverse_tag'])
if POOLED:
	print("Nanopore reads are from a pooled sample")
	NANOPORE_SAMPLES=config['nanopore_pooled_name']
if len(SAMPLES)==1:
	SAMPLING_TYPE=["tot"]

dir_list = ["RULES_DIR","ENVS_DIR", "ADAPTERS_DIR", "CONTAMINANTS_DIR","RAW_DATA_DIR", "QC_DIR", "CLEAN_DATA_DIR", "ASSEMBLY_DIR", "VIRAL_DIR", "vOUT_DIR", "MAPPING_DIR", "MMSEQS", "ANNOTATION", "ASSEMBLY_TEST"]
dir_names = ["rules", "../envs", "db/adapters",  RESULTS_DIR + "/db/contaminants" ,RAW_DATA_DIR, RESULTS_DIR + "/01_QC", RESULTS_DIR + "/02_CLEAN_DATA", RESULTS_DIR + "/03_CONTIGS", VIRAL_CONTIGS_DIR , REPRESENTATIVE_CONTIGS_DIR ,RESULTS_DIR + "/06_MAPPING", RESULTS_DIR + "/08_MMSEQS", RESULTS_DIR + "/07_ANNOTATION", RESULTS_DIR + "/08_ASSEMBLY_TEST"]
dirs_dict = dict(zip(dir_list, dir_names))

print("Read Types = " )
print(*READ_TYPES, sep = ", ")

print("Sample Names = ")
print(*SAMPLES, sep = ", ")

print("Contaminants = ")
print(*CONTAMINANTS, sep = ", ")

print("Reference contigs = ")
print(REPRESENTATIVE_CONTIGS_BASE)
print(REPRESENTATIVE_CONTIGS_DIR)

print("Results Dir = ")
print(RESULTS_DIR)
print("Nanopore = ")
print(NANOPORE)

print("FAST5 = ")
print(TOMBO)

print("Nanopore sampes= ")
print(NANOPORE_SAMPLES)
#======================================================
# Rules
#======================================================

def inputAll(wildcards):
	inputs=[]
	inputs.append(dirs_dict["QC_DIR"]+ "/preQC_illumina_report.html")
	inputs.append(dirs_dict["QC_DIR"]+ "/postQC_illumina_report.html")
	inputs.extend(expand(dirs_dict["ASSEMBLY_DIR"] + "/assembly_quast_report.{sampling}.txt", sampling=SAMPLING_TYPE))
	inputs.extend(expand(dirs_dict["MAPPING_DIR"]+ "/vOTU_abundance_table_json.{sampling}.biom", sampling=SAMPLING_TYPE, confidence=CONFIDENCE_TYPES))
	inputs.extend(expand(dirs_dict["MAPPING_DIR"]+ "/vOTU_summary.{sampling}.txt",sampling=SAMPLING_TYPE))
	#inputs.extend(expand(dirs_dict["ANNOTATION"] + "/" + REPRESENTATIVE_CONTIGS_BASE + ".tot" + "_annotated.csv",sampling=SAMPLING_TYPE))
	inputs.extend(expand(dirs_dict["vOUT_DIR"] + "/taxonomy_report_" + REPRESENTATIVE_CONTIGS_BASE + ".{sampling}.html",sampling=SAMPLING_TYPE))
	inputs.extend(expand(dirs_dict["vOUT_DIR"] + "/taxonomy_report_" + REPRESENTATIVE_CONTIGS_BASE + ".{sampling}.tbl",sampling=SAMPLING_TYPE))
	inputs.extend(directory(expand(dirs_dict["vOUT_DIR"] + "/VIBRANT_" + REPRESENTATIVE_CONTIGS_BASE  + ".{sampling}",sampling=SAMPLING_TYPE)))
	inputs.extend(expand(dirs_dict["vOUT_DIR"]+ "/" + REPRESENTATIVE_CONTIGS_BASE + "_vContact.{sampling}/genome_by_genome_overview.csv", sampling=SAMPLING_TYPE))
	inputs.extend(expand(dirs_dict["vOUT_DIR"] + "/checkV_{sampling}/quality_summary.tsv", sampling=SAMPLING_TYPE))
	inputs.append(dirs_dict["ANNOTATION"] + "/"+ REPRESENTATIVE_CONTIGS_BASE + "_blast_output_IMG_VR.tot.csv")
	#inputs.append(dirs_dict["ANNOTATION"] + "/"+ REPRESENTATIVE_CONTIGS_BASE + "_blast_viralRefSeq.tot.csv")
	inputs.append(dirs_dict["CLEAN_DATA_DIR"] + "/kmer_rarefraction_plot.tot.png")
	inputs.extend(expand(dirs_dict["vOUT_DIR"]+ "/" + REPRESENTATIVE_CONTIGS_BASE + "_vcontact2_taxonomy.{sampling}.csv", sampling=SAMPLING_TYPE))
	inputs.extend(expand(dirs_dict["CLEAN_DATA_DIR"] + "/{sample}_kraken2_domains_tot.csv", sample=SAMPLES)),
	inputs.append(dirs_dict["ANNOTATION"] + "/summary_information.tot.csv")
	if NANOPORE:
		inputs.extend(expand(dirs_dict["QC_DIR"] + "/{sample_nanopore}_nanopore_report_preQC.html",sample_nanopore=NANOPORE_SAMPLES))
		inputs.extend(expand(dirs_dict["QC_DIR"] + "/{sample_nanopore}_nanopore_report_postQC.html", sample_nanopore=NANOPORE_SAMPLES))
	if TOMBO:
		inputs.append(dirs_dict["ANNOTATION"] + "/"+ REPRESENTATIVE_CONTIGS_BASE + ".fraction_modified_reads.plus.wig")
	return inputs


rule all:
	input:
		inputAll,

def inputCleanReads(wildcards):
	inputs=[]
	inputs.append(dirs_dict["QC_DIR"]+ "/postQC_illumina_report.html")
	if NANOPORE:
		inputs.extend(expand(dirs_dict["QC_DIR"] + "/{sample_nanopore}_nanopore_report_postQC.html", sample_nanopore=NANOPORE_SAMPLES))
	return inputs

rule clean_reads:
	input:
		inputCleanReads,
		dirs_dict["CLEAN_DATA_DIR"] + "/kmer_rarefraction_plot.tot.png",
		dirs_dict["QC_DIR"]+ "/preQC_illumina_report.html",
		dirs_dict["QC_DIR"]+ "/postQC_illumina_report.html",

rule abundance_from_db_contigs:
	input:
		(dirs_dict["MAPPING_DIR"]+ "/vOTU_abundance_table_DB.tot.txt")

rule assembly_vs_reference:
	input:
		(dirs_dict["MMSEQS"] + "/tmp")

rule assembly:
	input:
		expand(dirs_dict["ASSEMBLY_DIR"] + "/assembly_quast_report.{sampling}.txt", sampling=SAMPLING_TYPE),
		(dirs_dict["QC_DIR"]+ "/preQC_illumina_report.html"),
		(dirs_dict["QC_DIR"]+ "/postQC_illumina_report.html"),
		(dirs_dict["CLEAN_DATA_DIR"] + "/kmer_rarefraction_plot.tot.png"),

#		scaffolds=expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_"+ LONG_ASSEMBLER + "_corrected_scaffolds.tot.fasta", sample=SAMPLES),

rule annotate_VIBRANT_contigs:
	input:
		vibrant=(dirs_dict["vOUT_DIR"] + "/VIBRANT_" + REPRESENTATIVE_CONTIGS_BASE + ".tot"),

rule checkViralCompletness:
	input:
		checkV=dirs_dict["VIRAL_DIR"] + "/checkV_tot/quality_summary.tsv"

subsample_test=[10,20,30,40,50,60,70,80,90,100]
#subsample_test=[10,20]

rule test_assembly_depth:
	input:
		checkV=expand(dirs_dict["ASSEMBLY_TEST"] + "/{sample}_{subsample}_virsorter_checkV_tot/quality_summary.tsv", sample=SAMPLES, subsample=subsample_test),

		#quast_txt_assembly=dirs_dict["ASSEMBLY_TEST"] + "/assembly_quast_report.tot.txt",
		#quast_txt_viral=dirs_dict["ASSEMBLY_TEST"] + "/viral_representatives_quast_report.tot.txt",

rule annotate_VIGA_contigs:
	input:
		viga_log=dirs_dict["ANNOTATION"] + "/viga_log_" + REPRESENTATIVE_CONTIGS_BASE + ".tot.txt",

rule runVirSorter:
	input:
		expand(dirs_dict["VIRAL_DIR"] + "/virSorter_{sampling}/VIRSorter_global-phage-signal.csv", sampling=["tot"])

rule getSRA_runs:
	input:
		forward=expand(dirs_dict["RAW_DATA_DIR"] + "/{SRA}_pass_1.fastq", SRA=SRA_list),
		reverse=expand(dirs_dict["RAW_DATA_DIR"] + "/{SRA}_pass_2.fastq", SRA=SRA_list),

rule taxonomyAssignmentvContact:
	input:
		OTUs=dirs_dict["vOUT_DIR"]+ "/" + REPRESENTATIVE_CONTIGS_BASE + "_ORFs_merged.tot.fasta",

rule taxonomyAssignmenMMseqs:
	input:
		html=(dirs_dict["vOUT_DIR"] + "/taxonomy_report_" + REPRESENTATIVE_CONTIGS_BASE + ".tot.html"),

rule runALE:
	input:
		expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_paired_sorted.tot_to_short_read.ale", sample=SAMPLES),
		expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_paired_sorted.tot_to_hybrid_assembly.ale", sample=SAMPLES),
		expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_paired_sorted.tot_to_long_read.ale", sample=SAMPLES),
		expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_paired_sorted.tot_to_WEC_spades_filtered_scaffolds.tot.ale", sample=SAMPLES),
		expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_paired_sorted.tot_to_WEC_contigs_canu.tot.ale", sample=SAMPLES),
		expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_paired_sorted.tot_to_flye_combined_assembly_WEC.tot.ale", sample=SAMPLES),
		expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_paired_sorted.tot_to_racon_WEC_contigs_1_canu.tot.ale", sample=SAMPLES),
		expand(dirs_dict["ASSEMBLY_DIR"] + "/{sample}_paired_sorted.tot_to_WEC_canu_corrected_scaffolds.tot.ale", sample=SAMPLES),


# /home/lmf/04_MOSAIC/WARWICK/WEC/03_CONTIGS/hybrid_assembly.fasta
# /home/lmf/04_MOSAIC/WARWICK/WEC/03_CONTIGS/long_read.fasta
# /home/lmf/04_MOSAIC/WARWICK/WEC/03_CONTIGS/short_read.fasta
# /home/lmf/04_MOSAIC/WARWICK/WEC/03_CONTIGS/WEC_spades_filtered_scaffolds.tot.fasta
# /home/lmf/04_MOSAIC/WARWICK/WEC/03_CONTIGS/WEC_contigs_canu.tot.fasta
# /home/lmf/04_MOSAIC/WARWICK/WEC/03_CONTIGS/flye_combined_assembly_WEC.tot.fasta
# /home/lmf/04_MOSAIC/WARWICK/WEC/03_CONTIGS/racon_WEC_contigs_1_canu.tot.fasta
# /home/lmf/04_MOSAIC/WARWICK/WEC/03_CONTIGS/WEC_canu_corrected_scaffolds.tot.fasta

include: os.path.join(RULES_DIR, '00_download_tools.smk')
include: os.path.join(RULES_DIR, '01_quality_control_short.smk')
include: os.path.join(RULES_DIR, '02_assembly_short.smk')
include: os.path.join(RULES_DIR, '03_viral_identification.smk')
include: os.path.join(RULES_DIR, '04_vOTU_clustering.smk')
include: os.path.join(RULES_DIR, '05_taxonomy_assignment.smk')
include: os.path.join(RULES_DIR, '06_viral_annotation.smk')
include: os.path.join(RULES_DIR, 'resultsParsing.smk')
include: os.path.join(RULES_DIR, 'abundance.smk')
include: os.path.join(RULES_DIR, '09_test_assembly_depth.smk')



if NANOPORE==True:
	include: os.path.join(RULES_DIR, '01_quality_control_long.smk')
	include: os.path.join(RULES_DIR, '02_assembly_long.smk')
